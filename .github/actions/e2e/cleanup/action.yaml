name: Cleanup
description: 'Runs all the cleanup tasks to cleanup resources deployed during E2E'
inputs:
  account_id:
    description: "Account ID to access AWS"
    required: true
  role:
    description: "Role to access AWS"
    required: true
  region:
    description: "Region to access AWS"
    required: true
  cluster_name:
    description: 'Name of the cluster to be launched by eksctl'
    required: true
  git_ref:
    description: "The git commit, tag, or branch to check out. Requires a corresponding Karpenter snapshot release"
  eksctl_version:
    description: "Version of eksctl to install"
    default: v0.160.0-rc.0
runs:
  using: "composite"
  steps:
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4.0.1
      with:
        role-to-assume: arn:aws:iam::${{ inputs.account_id }}:role/${{ inputs.role }}
        aws-region: ${{ inputs.region }}
        role-duration-seconds: 21600
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.git_ref }}
    - uses: ./.github/actions/e2e/install-eksctl
      with:
        version: ${{ inputs.eksctl_version }}
    - name: delete-instance-profiles
      shell:
      run: |
        for name in $(aws iam list-instance-profiles --query "InstanceProfiles[*].{Name:InstanceProfileName}" --output text); do
          tags=$(aws iam list-instance-profile-tags --instance-profile-name $name --output json || true)
          if [[ $(echo $tags | jq -r '.Tags[] | select(.Key == "testing/cluster") | .Value') == "${{ inputs.cluster_name }}" ]]; then
              echo "Deleting instance profile '$name'..."
              roleName=$(aws iam get-instance-profile --instance-profile-name $name --query "InstanceProfile.Roles[*].{Name:RoleName}" --output text)
              aws iam remove-role-from-instance-profile --instance-profile-name $name --role-name $roleName
              aws iam delete-instance-profile --instance-profile-name $name
          fi
        done
    - name: delete-cluster
      shell: bash
      run: |
        eksctl delete cluster --name ${{ inputs.cluster_name }} --timeout 60m --wait || true
    - name: delete-network-interfaces
      shell: bash
      run: |
        aws ec2 describe-network-interfaces \
          --filter Name=tag:cluster.k8s.amazonaws.com/name,Values=${{ inputs.cluster_name }} \
          --query "NetworkInterfaces[*].NetworkInterfaceId" \
          --output text |
        xargs \
          -n 1 \
          -r \
          aws ec2 delete-network-interface \
            --network-interface-id
    - name: delete-security-group
      shell: bash
      # For drift testing, we create a security group and need to clean it up here
      # to avoid leaks if the tests is not fully completed
      run: |
        aws ec2 describe-security-groups \
          --filters Name=group-name,Values=security-group-drift Name=tag:karpenter.sh/discovery,Values=${{ inputs.cluster_name }} \
          --query "SecurityGroups[*].{ID:GroupId}" \
          --output text |
        xargs \
          -n 1 \
          -r \
          aws ec2 delete-security-group \
            --group-id
    - name: delete-iam-alpha-policy
      shell: bash
      run: |
        aws iam delete-policy --policy-arn "arn:aws:iam::${{ inputs.account_id }}:policy/KarpenterControllerPolicy-Alpha-${{ inputs.cluster_name }}" || true
    - name: delete-iam-policies-stack
      shell: bash
      run: |
        aws cloudformation delete-stack --stack-name iam-${{ inputs.cluster_name }}
        aws cloudformation wait stack-delete-complete --stack-name iam-${{ inputs.cluster_name }}
    - name: delete-cluster-stack
      shell: bash
      run: |
        aws cloudformation delete-stack --stack-name eksctl-${{ inputs.cluster_name }}-cluster || true
        aws cloudformation wait stack-delete-complete --stack-name eksctl-${{ inputs.cluster_name }}-cluster || true
    - name: delete-launch-templates
      shell: bash
      run: |
        aws ec2 describe-launch-templates \
          --filter Name=tag:karpenter.k8s.aws/cluster,Values=${{ inputs.cluster_name }} \
          --query "LaunchTemplates[*].LaunchTemplateId" \
          --output text |
        xargs \
          -n 1 \
          -r \
          aws ec2 delete-launch-template \
            --launch-template-id
